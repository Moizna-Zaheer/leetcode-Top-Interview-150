class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        # Start filling from the end of nums1
        last = m + n - 1

        # Merge in reverse order
        while m > 0 and n > 0:
            if nums1[m - 1] > nums2[n - 1]:
                nums1[last] = nums1[m - 1]
                m -= 1
            else:
                nums1[last] = nums2[n - 1]
                n -= 1
            last -= 1

        # Fill nums1 with the remaining elements of nums2
        # This is needed if nums2 has the smallest elements that need to be placed at the start of nums1
        while n > 0:
            nums1[last] = nums2[n - 1]
            n -= 1
            last -= 1






# wrong time limit exceeded 
# class Solution:
#     def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
#         """
#         Do not return anything, modify nums1 in-place instead.
#         """

#         last = m+n -1

#         while m>0 and n>0 :
#             if nums1[m-1] > nums2[n-1] :
#                 nums1[last] = nums1[m]
#                 m =-1
#             else :
#                 nums1[last] = nums2[n-1]
#                 n = -1
#             last = -1

#         while n > 0:
#             nums1[last] = nums2[n-1]
#             n -= 1
#             last -= 1 
